drop database if exists negocio_V;
create database negocio_V;

use negocio_V;

CREATE TABLE productos (
    id_producto INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100),
    id_categoria INT,
    precio DECIMAL(10, 2),
    stock INT,
    FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria)
);

-- 2. Tabla categorias:

CREATE TABLE categorias (
    id_categoria INT AUTO_INCREMENT PRIMARY KEY,
    nombre_categoria VARCHAR(50)
);

-- 3. Tabla ventas:
CREATE TABLE ventas (
    id_venta INT AUTO_INCREMENT PRIMARY KEY,
    id_producto INT,
    cantidad INT,
    fecha DATE,
    precio_total DECIMAL(10, 2),
    FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
);

-- Insertar categorías
INSERT INTO categorias (nombre_categoria) VALUES ('Camisetas');
INSERT INTO categorias (nombre_categoria) VALUES ('Pantalones');
INSERT INTO categorias (nombre_categoria) VALUES ('Zapatos');

-- Insertar productos
INSERT INTO productos (nombre, id_categoria, precio, stock) VALUES 
('Camiseta roja', 1, 20.00, 100),
('Pantalón azul', 2, 35.00, 50),
('Zapatos deportivos', 3, 50.00, 30);

-- Insertar ventas
INSERT INTO ventas (id_producto, cantidad, fecha, precio_total)VALUES 
(1, 2, '2024-10-15', 40.00),
 (2, 1, '2024-10-16', 35.00),
 (3, 3, '2024-10-17', 150.00);
 
-- Relaciono todas las tablas

SELECT*FROM ventas v
JOIN productos p ON v.id_producto = p.id_producto
JOIN categorias c ON p.id_categoria = c.id_categoria;

CREATE VIEW vista_ventas_detalle AS
SELECT v.id_venta,p.nombre AS producto, p.precio, p.stock, 
c.nombre_categoria, v.cantidad, v.fecha, v.precio_total
FROM ventas v
JOIN productos p ON v.id_producto = p.id_producto
JOIN categorias c ON p.id_categoria = c.id_categoria;
 show tables;



-- 1. Consultas con `JOIN`

-- Consulta 1: Obtener una lista de todos los productos junto con su categoría.
select p.id_producto,p.nombre,p.id_categoria,p. precio,p. stock 
from productos p
JOIN categorias c ON p.id_categoria = c.id_categoria;

-- Consulta 2: Obtener las ventas realizadas de un producto específico (por ejemplo, el producto con ID 1) y mostrar la cantidad vendida y el precio total.

select v.cantidad,v.fecha,v.precio_total
from ventas v left join productos p
on v.id_producto =p.id_producto
where p.id_producto =1;
SELECT v.id_venta,   -- en esta resolucion muestro que producto es
p.nombre AS producto, v.cantidad, v.precio_total
FROM ventas v
JOIN productos p ON v.id_producto = p.id_producto
WHERE p.id_producto = 1;

-- 2. Uso de Funciones de Agrupacion

-- Consulta 3: Obtener el precio máximo, mínimo y promedio de todos los productos.

select round( avg(precio),2) precio_promedio
from productos;
select max(precio) precio_maximo
from productos;

select min(precio) precio_minimo
from productos;
-- 13 Obtener el precio medio de los productos de cada fabricante, mostrando el nombre del fabricante.
select round(avg(precio),2) precio_promedio,f.nombre,f.codigo
from articulos a 
join fabricantes f
on a.fabricante =f.codigo
group by f.nombre;
-- Consulta 4: Obtener el producto con el precio más alto.
select max(precio) precio_maximo,nombre,stock
from productos;

-- Consulta 5: Obtener el total de ventas de cada producto 
-- (precio total de todas las ventas por producto).
select sum(v.cantidad) total_cantidad,precio_total
from ventas v join productos p  on v.id_producto=p.id_producto
group by v.id_producto;

-- 3. Operaciones de Actualización y Eliminación

-- Consulta 6: Actualizar el precio de un producto (por ejemplo, el producto con ID 1)
--  a un nuevo valor (por ejemplo, 150.00).
-- comando update (ANSI) modificar los datos
update productos set precio='150'
where id_producto= 1; 
select*from productos;
-- Consulta 7: Aumentar el precio de todos los productos de una categoría específica 
-- (por ejemplo, la categoría con ID 2) en un 10%.
update productos set precio=precio*1.10
where id_producto= 2;
select*from productos;
-- Consulta 8: Eliminar un producto específico (por ejemplo, el producto con ID 3) de la base de datos.
delete from ventas
where id_producto=3;
delete from productos
where id_producto = 3;

-- Consulta 9: Eliminar todas las ventas asociadas a 
-- un producto específico (por ejemplo, el producto con ID 2)
delete from ventas
where id_producto=2;
delete from productos
where id_producto = 2;
select*from ventas;
select*from productos;
--    ******   Clase12  ******

drop database if exists biblioteca_V;
create database biblioteca_V;

use biblioteca_V;

create table libros(
    codLibro int primary key auto_increment,
    nombre varchar(45)not null,
    autor varchar(45)not null,
    editorial varchar(45)not null,
    fechaPublicacion date,
    codTipoLibro int
);

create table tipoLibro(
    codTipoLibro int primary key,
    descripcion varchar(45)not null
);

create table socios (
    codSocio int primary key auto_increment,
    nombre varchar(45) not null,
    apellido varchar(45)not null,
    telefono varchar(20)not null,
    celular varchar(20),
    dni varchar(8)not null,
    direccion varchar(45)not null,
    codigoPostal varchar (12)not null,
    email varchar(45),
    categoriaSocio varchar(45)
);

create table tipoSocio(
   categoriaSocio varchar(45)primary key,
    descripcion varchar(45)
);

create table reservas(
    codSocio int,
    codLibro int,
    fechaReserva date,
    primary key(codSocio,codLibro,fechaReserva)
);

alter table libros
add constraint
FK_libros_tipoLibro
foreign key (codTipoLibro)
references TipoLibro(codTipoLibro)
on delete cascade;

alter table socios
add constraint
FK_Socios_TipoSocios
foreign key(categoriaSocio)
references tipoSocio(categoriaSocio)
on delete cascade;

alter table reservas
add constraint
FK_reservas_socios
foreign key(codSocio)
references socios(codsocio)
on delete cascade;

alter table reservas
add constraint 
FK_reserva_libros
foreign key(codLibro)
references libros(codLibro)
on delete cascade;

insert tipoLibro values
('1','Enciclopedia'),
('2','Manual'),
('3','Catalogo'),
('4','diccionario');
select * from tipoLibro;

insert into libros (nombre,autor,editorial,fechapublicacion,codTipoLibro)values
('MysQL al maximo','Davis Garcia','EMECE','2010/10/10','2'),
('El Caballero','Juan Cruz','J. Cruz','2000/08/11','1'),
('Todo java','Jose fernandez','Planeta','2015/10/22','3'),
('Mi primer Dicionario','Real Academia','Larousse','2001/2/24','4');
select * from libros;

insert into tipoSocio(categoriaSocio,descripcion) values
('Estandar','Abono normal'),
('Vitalicio','No pagas Abono'),
('Temporario','Abono con recargo');
select * from tipoSocio;

insert into socios(nombre,apellido,celular,dni,direccion,codigopostal,email,categoriaSocio)values
('Ana','Sosa','1158961458','25784125','Larrea 458','1456','anasosa@gmail.com','Estandar'),
('Jose','Torres','1178452365','8456987','Salta 458','1478','josetorres@gmail.com','Vitalicio'),
('Maria','Gomez','1147893654','23456789','La Rioja','1235','mariagomez@gmail.com','Temporario'),
('Juan','Roque','1123564578','10256358','Mexico 457','1423','juanroque@gmail.com','Vitalicio'),
('Pedro','Ruiz','1145783659','26589412','Puan 4526','1789','pedroruiz@gmail.com','Temporario');
select * from socios;

insert into reservas (codSocio,codLibro,fechaReserva)values
(4,2,curdate()),
(3,1,curdate()),
(2,3,'2024/11/10'),
(1,4,curdate());

select * from reservas;

-- para relacionar todas las tablas
select * from tipoSocio ts 
join socios s on ts.categoriaSocio=s.categoriaSocio
join reservas r on s.codSocio=r.codSocio
join libros l on r.codLibro=l.codLibro
join tipoLibro tl on tl.codTipoLibro=l.codTipoLibro;

-- vistas
 create view biblioteca_v as select ts.categoriaSocio,ts.descripcion
 descripcion_socio,s.codSocio,s.nombre,s.apellido,s.telefono,s.celular,s.dni,s.direccion,
 s.codigoPostal,s.email,r.fechaReserva fecha_reserva,l.nombre nombre_libro,l.autor,
 l.editorial,l.fechaPublicacion,tl.codTipoLibro codigo_libro,tl.descripcion descripcion_tipo_libro
 from tipoSocio ts 
 join socios s on ts.categoriaSocio=s.categoriaSocio
 join reservas r on s.codSocio=r.codSocio
 join libros l on r.codLibro=l.codLibro
 join tipoLibro tl on tl.codTipoLibro=l.codTipoLibro;
 drop view biblioteca_v;
 show tables;
 select*from biblioteca_v;
 
-- a que socio se le presto enciclopedia?
-- Borrar una vista drop view biblioteca_v;
-- esta nueva forma de llamar es como un filtrado. Ahora llamamos a la vista
select*from biblioteca_v
where codigo_libro='2';
-- que se le presto a Juan Roque?
select descripcion_Tipo_Libro descripcion,nombre_libro
from biblioteca_v
where nombre='juan' and apellido='Roque';
-- que clase de socio es Juan Roque? 
select categoriaSocio categoria,descripcion_socio descripcion
from biblioteca_v
where nombre='juan' and apellido='Roque';
-- cuantos libros se le prestaron a los socios temporales?
select count(*) cantidad 
from biblioteca_v
where categoriaSocio='temporario';
-- A quienes se le prestaron manuales?
select nombre,apellido,celular
from biblioteca_v
where descripcion_tipo_libro='manuales';
-- Cuantos libros se le prestaron a Juan Roque
select count(*) cantidad 
from biblioteca_v
where nombre='Juan' and apellido='Roque';
-- que libro se prestaron el dia de hoy?
select nombre_Libro
from biblioteca_v
where fecha_Reserva=curdate();
